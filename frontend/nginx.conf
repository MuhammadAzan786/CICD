# ==============================================================================
# NGINX CONFIGURATION FOR REACT APP
# ==============================================================================
# This configuration tells nginx how to serve the React application
# It handles routing, caching, compression, and security headers

# ==============================================================================
# SERVER BLOCK
# ==============================================================================
server {
    # Listen on port 80 (HTTP)
    # This is the port inside the container
    # When you run: docker run -p 3000:80
    #   - nginx listens on port 80 inside container
    #   - Docker maps host port 3000 → container port 80
    #   - You access the app at http://localhost:3000
    listen 80;

    # Server name (use localhost for local development)
    # In production, you'd set this to your domain name
    # Example: server_name example.com www.example.com;
    server_name localhost;

    # Root directory where nginx looks for files to serve
    # This is where we copied the built React app (dist folder)
    # Files: index.html, assets/index-[hash].js, assets/index-[hash].css, etc.
    root /usr/share/nginx/html;

    # Default file to serve when accessing a directory
    # When user visits http://localhost:3000/, nginx serves index.html
    index index.html;

    # ==============================================================================
    # LOCATION BLOCK - MAIN ROUTING
    # ==============================================================================
    # This handles all requests to the server
    location / {
        # try_files directive tells nginx where to look for files
        # It tries multiple options in order until one succeeds:
        #
        # 1. $uri - Try to serve the exact file requested
        #    Example: /assets/index.js → serves /usr/share/nginx/html/assets/index.js
        #
        # 2. $uri/ - Try to serve as a directory with index.html
        #    Example: /about/ → serves /usr/share/nginx/html/about/index.html
        #
        # 3. /index.html - If nothing found, serve index.html (fallback)
        #    This is CRITICAL for React Router (client-side routing)
        #
        # Why the fallback?
        # - React uses client-side routing (routes like /users, /about)
        # - These routes don't exist as files on the server
        # - Without fallback, nginx returns 404 for /users
        # - With fallback, nginx serves index.html, React Router handles the route
        try_files $uri $uri/ /index.html;

        # Add cache control headers for HTML files
        # no-cache means browser must revalidate with server before using cached version
        # This ensures users get the latest version when you deploy updates
        add_header Cache-Control "no-cache, must-revalidate";
    }

    # ==============================================================================
    # LOCATION BLOCK - STATIC ASSETS (JS, CSS, IMAGES)
    # ==============================================================================
    # Handle requests for static assets (JavaScript, CSS, images, fonts)
    # These files are in /assets/ and have hashed names (e.g., index-abc123.js)
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|svg|woff|woff2|ttf|eot)$ {
        # Cache these files for 1 year (31536000 seconds)
        # Why? Vite adds content hashes to filenames (index-abc123.js)
        # If the file changes, the hash changes, so the filename changes
        # Old cached files can't be accidentally used (different filename)
        # This maximizes cache efficiency and performance
        expires 1y;
        add_header Cache-Control "public, immutable";

        # Log access to assets (useful for debugging)
        access_log off;
    }

    # ==============================================================================
    # GZIP COMPRESSION
    # ==============================================================================
    # Enable gzip compression to reduce file sizes over the network
    # This speeds up load times, especially for JS and CSS files
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/rss+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    # ==============================================================================
    # SECURITY HEADERS
    # ==============================================================================
    # Add security headers to protect against common web vulnerabilities

    # X-Frame-Options: Prevents clickjacking attacks
    # DENY means the page cannot be embedded in <iframe>, <frame>, or <object>
    add_header X-Frame-Options "DENY" always;

    # X-Content-Type-Options: Prevents MIME type sniffing
    # Ensures browser respects the Content-Type header
    add_header X-Content-Type-Options "nosniff" always;

    # X-XSS-Protection: Enables browser's XSS filter
    # 1; mode=block stops page rendering if XSS attack detected
    add_header X-XSS-Protection "1; mode=block" always;

    # ==============================================================================
    # ERROR PAGES
    # ==============================================================================
    # Custom error page handling
    # For React apps, even errors should show index.html (React can handle error UI)
    error_page 404 /index.html;

    # ==============================================================================
    # ADDITIONAL CONFIGURATION (OPTIONAL)
    # ==============================================================================

    # Hide nginx version in error pages and headers (security)
    server_tokens off;

    # Maximum file upload size (default is 1MB)
    # Increase if your app needs to upload larger files
    client_max_body_size 10M;
}

# ==============================================================================
# HOW THIS WORKS
# ==============================================================================
# 1. User visits http://localhost:3000/
#    → nginx serves /usr/share/nginx/html/index.html
#    → React app loads in browser
#
# 2. User navigates to /about (using React Router)
#    → React Router changes URL without page reload (client-side)
#    → No server request needed
#
# 3. User refreshes page while on /about
#    → Browser requests /about from server
#    → nginx can't find /about file
#    → try_files fallback serves index.html
#    → React app loads and React Router shows /about route
#
# 4. Browser requests /assets/index-abc123.js
#    → nginx serves the file with 1-year cache header
#    → Browser caches it for future visits
#
# 5. Browser requests /api/data
#    → This doesn't match any nginx routes
#    → try_files eventually serves index.html (fallback)
#    → React app handles the request (maybe shows 404 page)
